import { Orbit, OrbitingCelestialBody } from "../../../ts-ksp";
declare const _default: import("vue").DefineComponent<{}, {
    planetNames: string[];
    localVals: import("vue").Ref<{
        originBodyName: string;
        slingshotBodyName: string;
        destinationBodyName: string;
        departMinDays: string | number | import("vue-router").LocationQueryValue[];
        departMaxDays: string | number | import("vue-router").LocationQueryValue[];
        travelTimeMinDays: string | number | import("vue-router").LocationQueryValue[];
        travelTimeMaxDays: string | number | import("vue-router").LocationQueryValue[];
    }>;
    selectedJourney: import("vue").Ref<{
        startTime: number;
        endTime: number;
        originBody: {
            orbit: {
                referenceBody: {
                    name: string;
                    mass: number;
                    radius: number;
                    siderealRotation: number;
                    atmPressure: number;
                    atmScaleHeight: number;
                    atmRadius: number;
                    gravitationalParameter: number;
                    circularOrbitVelocity: (altitude: number) => number;
                    siderealTimeAt: (longitude: number, time: number) => number;
                };
                semiMajorAxis: number;
                eccentricity: number;
                inclination: number;
                longitudeOfAscendingNode: number;
                argumentOfPeriapsis: number;
                meanAnomalyAtEpoch: number;
                timeOfPeriapsisPassage: number | undefined;
                inclinationDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
                longitudeOfAscendingNodeDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
                argumentOfPeriapsisDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
                isHyperbolic: () => boolean;
                apoapsis: () => number;
                periapsis: () => number;
                apoapsisAltitude: () => number;
                periapsisAltitude: () => number;
                semiMinorAxis: () => number;
                semiLatusRectum: () => number;
                meanMotion: () => number;
                period: () => number;
                rotationToReferenceFrame: () => import("../../../ts-ksp/lib/quaternion").Quaternion;
                normalVector: () => import("../../../ts-ksp/lib/vector3").Vector3;
                phaseAngle: (orbit: Orbit, t: number) => number;
                meanAnomalyAt: (t: number) => number;
                eccentricAnomalyAt: (t: number) => number;
                trueAnomalyAt: (t: number) => number;
                trueAnomalyAtRadiusOutbound: (r: number) => number;
                trueAnomalyAtRadiusInbound: (r: number) => number;
                positionAt: (t: number) => import("../../../ts-ksp/lib/vector3").Vector3;
                eccentricAnomalyAtTrueAnomaly: (tA: number) => number;
                meanAnomalyAtTrueAnomaly: (tA: number) => number;
                timeAtTrueAnomaly: (tA: number, t0: number | null) => number;
                radiusAtTrueAnomaly: (tA: number) => number;
                altitudeAtTrueAnomaly: (tA: number) => number;
                speedAtTrueAnomaly: (tA: number) => number;
                positionAtTrueAnomaly: (tA: number) => import("../../../ts-ksp/lib/vector3").Vector3;
                velocityAtTrueAnomaly: (tA: number) => import("../../../ts-ksp/lib/vector3").Vector3;
                trueAnomalyAtPosition: (p: import("../../../ts-ksp/lib/vector3").Vector3) => number;
            };
            sphereOfInfluence: number;
            name: string;
            mass: number;
            radius: number;
            siderealRotation: number;
            atmPressure: number;
            atmScaleHeight: number;
            atmRadius: number;
            gravitationalParameter: number;
            circularOrbitVelocity: (altitude: number) => number;
            siderealTimeAt: (longitude: number, time: number) => number;
        };
        slingshotBody: {
            orbit: {
                referenceBody: {
                    name: string;
                    mass: number;
                    radius: number;
                    siderealRotation: number;
                    atmPressure: number;
                    atmScaleHeight: number;
                    atmRadius: number;
                    gravitationalParameter: number;
                    circularOrbitVelocity: (altitude: number) => number;
                    siderealTimeAt: (longitude: number, time: number) => number;
                };
                semiMajorAxis: number;
                eccentricity: number;
                inclination: number;
                longitudeOfAscendingNode: number;
                argumentOfPeriapsis: number;
                meanAnomalyAtEpoch: number;
                timeOfPeriapsisPassage: number | undefined;
                inclinationDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
                longitudeOfAscendingNodeDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
                argumentOfPeriapsisDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
                isHyperbolic: () => boolean;
                apoapsis: () => number;
                periapsis: () => number;
                apoapsisAltitude: () => number;
                periapsisAltitude: () => number;
                semiMinorAxis: () => number;
                semiLatusRectum: () => number;
                meanMotion: () => number;
                period: () => number;
                rotationToReferenceFrame: () => import("../../../ts-ksp/lib/quaternion").Quaternion;
                normalVector: () => import("../../../ts-ksp/lib/vector3").Vector3;
                phaseAngle: (orbit: Orbit, t: number) => number;
                meanAnomalyAt: (t: number) => number;
                eccentricAnomalyAt: (t: number) => number;
                trueAnomalyAt: (t: number) => number;
                trueAnomalyAtRadiusOutbound: (r: number) => number;
                trueAnomalyAtRadiusInbound: (r: number) => number;
                positionAt: (t: number) => import("../../../ts-ksp/lib/vector3").Vector3;
                eccentricAnomalyAtTrueAnomaly: (tA: number) => number;
                meanAnomalyAtTrueAnomaly: (tA: number) => number;
                timeAtTrueAnomaly: (tA: number, t0: number | null) => number;
                radiusAtTrueAnomaly: (tA: number) => number;
                altitudeAtTrueAnomaly: (tA: number) => number;
                speedAtTrueAnomaly: (tA: number) => number;
                positionAtTrueAnomaly: (tA: number) => import("../../../ts-ksp/lib/vector3").Vector3;
                velocityAtTrueAnomaly: (tA: number) => import("../../../ts-ksp/lib/vector3").Vector3;
                trueAnomalyAtPosition: (p: import("../../../ts-ksp/lib/vector3").Vector3) => number;
            };
            sphereOfInfluence: number;
            name: string;
            mass: number;
            radius: number;
            siderealRotation: number;
            atmPressure: number;
            atmScaleHeight: number;
            atmRadius: number;
            gravitationalParameter: number;
            circularOrbitVelocity: (altitude: number) => number;
            siderealTimeAt: (longitude: number, time: number) => number;
        };
        destinationBody: {
            orbit: {
                referenceBody: {
                    name: string;
                    mass: number;
                    radius: number;
                    siderealRotation: number;
                    atmPressure: number;
                    atmScaleHeight: number;
                    atmRadius: number;
                    gravitationalParameter: number;
                    circularOrbitVelocity: (altitude: number) => number;
                    siderealTimeAt: (longitude: number, time: number) => number;
                };
                semiMajorAxis: number;
                eccentricity: number;
                inclination: number;
                longitudeOfAscendingNode: number;
                argumentOfPeriapsis: number;
                meanAnomalyAtEpoch: number;
                timeOfPeriapsisPassage: number | undefined;
                inclinationDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
                longitudeOfAscendingNodeDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
                argumentOfPeriapsisDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
                isHyperbolic: () => boolean;
                apoapsis: () => number;
                periapsis: () => number;
                apoapsisAltitude: () => number;
                periapsisAltitude: () => number;
                semiMinorAxis: () => number;
                semiLatusRectum: () => number;
                meanMotion: () => number;
                period: () => number;
                rotationToReferenceFrame: () => import("../../../ts-ksp/lib/quaternion").Quaternion;
                normalVector: () => import("../../../ts-ksp/lib/vector3").Vector3;
                phaseAngle: (orbit: Orbit, t: number) => number;
                meanAnomalyAt: (t: number) => number;
                eccentricAnomalyAt: (t: number) => number;
                trueAnomalyAt: (t: number) => number;
                trueAnomalyAtRadiusOutbound: (r: number) => number;
                trueAnomalyAtRadiusInbound: (r: number) => number;
                positionAt: (t: number) => import("../../../ts-ksp/lib/vector3").Vector3;
                eccentricAnomalyAtTrueAnomaly: (tA: number) => number;
                meanAnomalyAtTrueAnomaly: (tA: number) => number;
                timeAtTrueAnomaly: (tA: number, t0: number | null) => number;
                radiusAtTrueAnomaly: (tA: number) => number;
                altitudeAtTrueAnomaly: (tA: number) => number;
                speedAtTrueAnomaly: (tA: number) => number;
                positionAtTrueAnomaly: (tA: number) => import("../../../ts-ksp/lib/vector3").Vector3;
                velocityAtTrueAnomaly: (tA: number) => import("../../../ts-ksp/lib/vector3").Vector3;
                trueAnomalyAtPosition: (p: import("../../../ts-ksp/lib/vector3").Vector3) => number;
            };
            sphereOfInfluence: number;
            name: string;
            mass: number;
            radius: number;
            siderealRotation: number;
            atmPressure: number;
            atmScaleHeight: number;
            atmRadius: number;
            gravitationalParameter: number;
            circularOrbitVelocity: (altitude: number) => number;
            siderealTimeAt: (longitude: number, time: number) => number;
        };
        originOrbitalSpeed: number;
        destinationOrbitalSpeed: number;
        totalDuration: number;
        firstLegDuration: number;
        secondLegDuration: number;
        slingshotTime: number;
        _transfer1?: {
            t0: number;
            t1: number;
            angle: number;
            orbit: {
                referenceBody: {
                    name: string;
                    mass: number;
                    radius: number;
                    siderealRotation: number;
                    atmPressure: number;
                    atmScaleHeight: number;
                    atmRadius: number;
                    gravitationalParameter: number;
                    circularOrbitVelocity: (altitude: number) => number;
                    siderealTimeAt: (longitude: number, time: number) => number;
                };
                semiMajorAxis: number;
                eccentricity: number;
                inclination: number;
                longitudeOfAscendingNode: number;
                argumentOfPeriapsis: number;
                meanAnomalyAtEpoch: number;
                timeOfPeriapsisPassage: number | undefined;
                inclinationDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
                longitudeOfAscendingNodeDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
                argumentOfPeriapsisDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
                isHyperbolic: () => boolean;
                apoapsis: () => number;
                periapsis: () => number;
                apoapsisAltitude: () => number;
                periapsisAltitude: () => number;
                semiMinorAxis: () => number;
                semiLatusRectum: () => number;
                meanMotion: () => number;
                period: () => number;
                rotationToReferenceFrame: () => import("../../../ts-ksp/lib/quaternion").Quaternion;
                normalVector: () => import("../../../ts-ksp/lib/vector3").Vector3;
                phaseAngle: (orbit: Orbit, t: number) => number;
                meanAnomalyAt: (t: number) => number;
                eccentricAnomalyAt: (t: number) => number;
                trueAnomalyAt: (t: number) => number;
                trueAnomalyAtRadiusOutbound: (r: number) => number;
                trueAnomalyAtRadiusInbound: (r: number) => number;
                positionAt: (t: number) => import("../../../ts-ksp/lib/vector3").Vector3;
                eccentricAnomalyAtTrueAnomaly: (tA: number) => number;
                meanAnomalyAtTrueAnomaly: (tA: number) => number;
                timeAtTrueAnomaly: (tA: number, t0: number | null) => number;
                radiusAtTrueAnomaly: (tA: number) => number;
                altitudeAtTrueAnomaly: (tA: number) => number;
                speedAtTrueAnomaly: (tA: number) => number;
                positionAtTrueAnomaly: (tA: number) => import("../../../ts-ksp/lib/vector3").Vector3;
                velocityAtTrueAnomaly: (tA: number) => import("../../../ts-ksp/lib/vector3").Vector3;
                trueAnomalyAtPosition: (p: import("../../../ts-ksp/lib/vector3").Vector3) => number;
            };
            ejectionVelocity: [number, number, number];
            ejectionDeltaVector: [number, number, number];
            ejectionInclination: number;
            ejectionAngle?: number | undefined;
            ejectionDeltaV: number;
            planeChangeAngleToIntercept?: number | undefined;
            planeChangeDeltaV: number;
            planeChangeTime?: number | undefined;
            planeChangeAngle?: number | undefined;
            insertionVelocity: [number, number, number];
            insertionInclination?: number | undefined;
            insertionDeltaV: number;
            deltaV: number;
        } | undefined;
        _transfer2?: {
            t0: number;
            t1: number;
            angle: number;
            orbit: {
                referenceBody: {
                    name: string;
                    mass: number;
                    radius: number;
                    siderealRotation: number;
                    atmPressure: number;
                    atmScaleHeight: number;
                    atmRadius: number;
                    gravitationalParameter: number;
                    circularOrbitVelocity: (altitude: number) => number;
                    siderealTimeAt: (longitude: number, time: number) => number;
                };
                semiMajorAxis: number;
                eccentricity: number;
                inclination: number;
                longitudeOfAscendingNode: number;
                argumentOfPeriapsis: number;
                meanAnomalyAtEpoch: number;
                timeOfPeriapsisPassage: number | undefined;
                inclinationDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
                longitudeOfAscendingNodeDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
                argumentOfPeriapsisDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
                isHyperbolic: () => boolean;
                apoapsis: () => number;
                periapsis: () => number;
                apoapsisAltitude: () => number;
                periapsisAltitude: () => number;
                semiMinorAxis: () => number;
                semiLatusRectum: () => number;
                meanMotion: () => number;
                period: () => number;
                rotationToReferenceFrame: () => import("../../../ts-ksp/lib/quaternion").Quaternion;
                normalVector: () => import("../../../ts-ksp/lib/vector3").Vector3;
                phaseAngle: (orbit: Orbit, t: number) => number;
                meanAnomalyAt: (t: number) => number;
                eccentricAnomalyAt: (t: number) => number;
                trueAnomalyAt: (t: number) => number;
                trueAnomalyAtRadiusOutbound: (r: number) => number;
                trueAnomalyAtRadiusInbound: (r: number) => number;
                positionAt: (t: number) => import("../../../ts-ksp/lib/vector3").Vector3;
                eccentricAnomalyAtTrueAnomaly: (tA: number) => number;
                meanAnomalyAtTrueAnomaly: (tA: number) => number;
                timeAtTrueAnomaly: (tA: number, t0: number | null) => number;
                radiusAtTrueAnomaly: (tA: number) => number;
                altitudeAtTrueAnomaly: (tA: number) => number;
                speedAtTrueAnomaly: (tA: number) => number;
                positionAtTrueAnomaly: (tA: number) => import("../../../ts-ksp/lib/vector3").Vector3;
                velocityAtTrueAnomaly: (tA: number) => import("../../../ts-ksp/lib/vector3").Vector3;
                trueAnomalyAtPosition: (p: import("../../../ts-ksp/lib/vector3").Vector3) => number;
            };
            ejectionVelocity: [number, number, number];
            ejectionDeltaVector: [number, number, number];
            ejectionInclination: number;
            ejectionAngle?: number | undefined;
            ejectionDeltaV: number;
            planeChangeAngleToIntercept?: number | undefined;
            planeChangeDeltaV: number;
            planeChangeTime?: number | undefined;
            planeChangeAngle?: number | undefined;
            insertionVelocity: [number, number, number];
            insertionInclination?: number | undefined;
            insertionDeltaV: number;
            deltaV: number;
        } | undefined;
        _vT1EndRef?: [number, number, number] | undefined;
        _vT2StartRef?: [number, number, number] | undefined;
        _vSlingshotBodyRef?: [number, number, number] | undefined;
        _vT1EndSs?: [number, number, number] | undefined;
        _vT2StartSs?: [number, number, number] | undefined;
        _ssManeuverPlane?: [number, number, number] | undefined;
        _slingshotApproachOrbit?: {
            referenceBody: {
                name: string;
                mass: number;
                radius: number;
                siderealRotation: number;
                atmPressure: number;
                atmScaleHeight: number;
                atmRadius: number;
                gravitationalParameter: number;
                circularOrbitVelocity: (altitude: number) => number;
                siderealTimeAt: (longitude: number, time: number) => number;
            };
            semiMajorAxis: number;
            eccentricity: number;
            inclination: number;
            longitudeOfAscendingNode: number;
            argumentOfPeriapsis: number;
            meanAnomalyAtEpoch: number;
            timeOfPeriapsisPassage: number | undefined;
            inclinationDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
            longitudeOfAscendingNodeDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
            argumentOfPeriapsisDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
            isHyperbolic: () => boolean;
            apoapsis: () => number;
            periapsis: () => number;
            apoapsisAltitude: () => number;
            periapsisAltitude: () => number;
            semiMinorAxis: () => number;
            semiLatusRectum: () => number;
            meanMotion: () => number;
            period: () => number;
            rotationToReferenceFrame: () => import("../../../ts-ksp/lib/quaternion").Quaternion;
            normalVector: () => import("../../../ts-ksp/lib/vector3").Vector3;
            phaseAngle: (orbit: Orbit, t: number) => number;
            meanAnomalyAt: (t: number) => number;
            eccentricAnomalyAt: (t: number) => number;
            trueAnomalyAt: (t: number) => number;
            trueAnomalyAtRadiusOutbound: (r: number) => number;
            trueAnomalyAtRadiusInbound: (r: number) => number;
            positionAt: (t: number) => import("../../../ts-ksp/lib/vector3").Vector3;
            eccentricAnomalyAtTrueAnomaly: (tA: number) => number;
            meanAnomalyAtTrueAnomaly: (tA: number) => number;
            timeAtTrueAnomaly: (tA: number, t0: number | null) => number;
            radiusAtTrueAnomaly: (tA: number) => number;
            altitudeAtTrueAnomaly: (tA: number) => number;
            speedAtTrueAnomaly: (tA: number) => number;
            positionAtTrueAnomaly: (tA: number) => import("../../../ts-ksp/lib/vector3").Vector3;
            velocityAtTrueAnomaly: (tA: number) => import("../../../ts-ksp/lib/vector3").Vector3;
            trueAnomalyAtPosition: (p: import("../../../ts-ksp/lib/vector3").Vector3) => number;
        } | undefined;
        _slingshotExitOrbit?: {
            referenceBody: {
                name: string;
                mass: number;
                radius: number;
                siderealRotation: number;
                atmPressure: number;
                atmScaleHeight: number;
                atmRadius: number;
                gravitationalParameter: number;
                circularOrbitVelocity: (altitude: number) => number;
                siderealTimeAt: (longitude: number, time: number) => number;
            };
            semiMajorAxis: number;
            eccentricity: number;
            inclination: number;
            longitudeOfAscendingNode: number;
            argumentOfPeriapsis: number;
            meanAnomalyAtEpoch: number;
            timeOfPeriapsisPassage: number | undefined;
            inclinationDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
            longitudeOfAscendingNodeDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
            argumentOfPeriapsisDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
            isHyperbolic: () => boolean;
            apoapsis: () => number;
            periapsis: () => number;
            apoapsisAltitude: () => number;
            periapsisAltitude: () => number;
            semiMinorAxis: () => number;
            semiLatusRectum: () => number;
            meanMotion: () => number;
            period: () => number;
            rotationToReferenceFrame: () => import("../../../ts-ksp/lib/quaternion").Quaternion;
            normalVector: () => import("../../../ts-ksp/lib/vector3").Vector3;
            phaseAngle: (orbit: Orbit, t: number) => number;
            meanAnomalyAt: (t: number) => number;
            eccentricAnomalyAt: (t: number) => number;
            trueAnomalyAt: (t: number) => number;
            trueAnomalyAtRadiusOutbound: (r: number) => number;
            trueAnomalyAtRadiusInbound: (r: number) => number;
            positionAt: (t: number) => import("../../../ts-ksp/lib/vector3").Vector3;
            eccentricAnomalyAtTrueAnomaly: (tA: number) => number;
            meanAnomalyAtTrueAnomaly: (tA: number) => number;
            timeAtTrueAnomaly: (tA: number, t0: number | null) => number;
            radiusAtTrueAnomaly: (tA: number) => number;
            altitudeAtTrueAnomaly: (tA: number) => number;
            speedAtTrueAnomaly: (tA: number) => number;
            positionAtTrueAnomaly: (tA: number) => import("../../../ts-ksp/lib/vector3").Vector3;
            velocityAtTrueAnomaly: (tA: number) => import("../../../ts-ksp/lib/vector3").Vector3;
            trueAnomalyAtPosition: (p: import("../../../ts-ksp/lib/vector3").Vector3) => number;
        } | undefined;
        _pManSs?: [number, number, number] | undefined;
        _speedManEndSs?: number | undefined;
        _vManStartSs?: [number, number, number] | undefined;
        _vManEndSs?: [number, number, number] | undefined;
        _deltaVectorMan?: [number, number, number] | undefined;
        _deltaVMan?: number | undefined;
        _slingshotSoiInTime?: number | undefined;
        _slingshotSoiOutTime?: number | undefined;
        reset: () => void;
        setRatio: (ratio: number) => void;
        readonly transfer1: {
            t0: number;
            t1: number;
            angle: number;
            orbit: {
                referenceBody: {
                    name: string;
                    mass: number;
                    radius: number;
                    siderealRotation: number;
                    atmPressure: number;
                    atmScaleHeight: number;
                    atmRadius: number;
                    gravitationalParameter: number;
                    circularOrbitVelocity: (altitude: number) => number;
                    siderealTimeAt: (longitude: number, time: number) => number;
                };
                semiMajorAxis: number;
                eccentricity: number;
                inclination: number;
                longitudeOfAscendingNode: number;
                argumentOfPeriapsis: number;
                meanAnomalyAtEpoch: number;
                timeOfPeriapsisPassage: number | undefined;
                inclinationDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
                longitudeOfAscendingNodeDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
                argumentOfPeriapsisDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
                isHyperbolic: () => boolean;
                apoapsis: () => number;
                periapsis: () => number;
                apoapsisAltitude: () => number;
                periapsisAltitude: () => number;
                semiMinorAxis: () => number;
                semiLatusRectum: () => number;
                meanMotion: () => number;
                period: () => number;
                rotationToReferenceFrame: () => import("../../../ts-ksp/lib/quaternion").Quaternion;
                normalVector: () => import("../../../ts-ksp/lib/vector3").Vector3;
                phaseAngle: (orbit: Orbit, t: number) => number;
                meanAnomalyAt: (t: number) => number;
                eccentricAnomalyAt: (t: number) => number;
                trueAnomalyAt: (t: number) => number;
                trueAnomalyAtRadiusOutbound: (r: number) => number;
                trueAnomalyAtRadiusInbound: (r: number) => number;
                positionAt: (t: number) => import("../../../ts-ksp/lib/vector3").Vector3;
                eccentricAnomalyAtTrueAnomaly: (tA: number) => number;
                meanAnomalyAtTrueAnomaly: (tA: number) => number;
                timeAtTrueAnomaly: (tA: number, t0: number | null) => number;
                radiusAtTrueAnomaly: (tA: number) => number;
                altitudeAtTrueAnomaly: (tA: number) => number;
                speedAtTrueAnomaly: (tA: number) => number;
                positionAtTrueAnomaly: (tA: number) => import("../../../ts-ksp/lib/vector3").Vector3;
                velocityAtTrueAnomaly: (tA: number) => import("../../../ts-ksp/lib/vector3").Vector3;
                trueAnomalyAtPosition: (p: import("../../../ts-ksp/lib/vector3").Vector3) => number;
            };
            ejectionVelocity: [number, number, number];
            ejectionDeltaVector: [number, number, number];
            ejectionInclination: number;
            ejectionAngle?: number | undefined;
            ejectionDeltaV: number;
            planeChangeAngleToIntercept?: number | undefined;
            planeChangeDeltaV: number;
            planeChangeTime?: number | undefined;
            planeChangeAngle?: number | undefined;
            insertionVelocity: [number, number, number];
            insertionInclination?: number | undefined;
            insertionDeltaV: number;
            deltaV: number;
        };
        readonly transfer2: {
            t0: number;
            t1: number;
            angle: number;
            orbit: {
                referenceBody: {
                    name: string;
                    mass: number;
                    radius: number;
                    siderealRotation: number;
                    atmPressure: number;
                    atmScaleHeight: number;
                    atmRadius: number;
                    gravitationalParameter: number;
                    circularOrbitVelocity: (altitude: number) => number;
                    siderealTimeAt: (longitude: number, time: number) => number;
                };
                semiMajorAxis: number;
                eccentricity: number;
                inclination: number;
                longitudeOfAscendingNode: number;
                argumentOfPeriapsis: number;
                meanAnomalyAtEpoch: number;
                timeOfPeriapsisPassage: number | undefined;
                inclinationDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
                longitudeOfAscendingNodeDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
                argumentOfPeriapsisDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
                isHyperbolic: () => boolean;
                apoapsis: () => number;
                periapsis: () => number;
                apoapsisAltitude: () => number;
                periapsisAltitude: () => number;
                semiMinorAxis: () => number;
                semiLatusRectum: () => number;
                meanMotion: () => number;
                period: () => number;
                rotationToReferenceFrame: () => import("../../../ts-ksp/lib/quaternion").Quaternion;
                normalVector: () => import("../../../ts-ksp/lib/vector3").Vector3;
                phaseAngle: (orbit: Orbit, t: number) => number;
                meanAnomalyAt: (t: number) => number;
                eccentricAnomalyAt: (t: number) => number;
                trueAnomalyAt: (t: number) => number;
                trueAnomalyAtRadiusOutbound: (r: number) => number;
                trueAnomalyAtRadiusInbound: (r: number) => number;
                positionAt: (t: number) => import("../../../ts-ksp/lib/vector3").Vector3;
                eccentricAnomalyAtTrueAnomaly: (tA: number) => number;
                meanAnomalyAtTrueAnomaly: (tA: number) => number;
                timeAtTrueAnomaly: (tA: number, t0: number | null) => number;
                radiusAtTrueAnomaly: (tA: number) => number;
                altitudeAtTrueAnomaly: (tA: number) => number;
                speedAtTrueAnomaly: (tA: number) => number;
                positionAtTrueAnomaly: (tA: number) => import("../../../ts-ksp/lib/vector3").Vector3;
                velocityAtTrueAnomaly: (tA: number) => import("../../../ts-ksp/lib/vector3").Vector3;
                trueAnomalyAtPosition: (p: import("../../../ts-ksp/lib/vector3").Vector3) => number;
            };
            ejectionVelocity: [number, number, number];
            ejectionDeltaVector: [number, number, number];
            ejectionInclination: number;
            ejectionAngle?: number | undefined;
            ejectionDeltaV: number;
            planeChangeAngleToIntercept?: number | undefined;
            planeChangeDeltaV: number;
            planeChangeTime?: number | undefined;
            planeChangeAngle?: number | undefined;
            insertionVelocity: [number, number, number];
            insertionInclination?: number | undefined;
            insertionDeltaV: number;
            deltaV: number;
        };
        readonly vT1EndRef: [number, number, number];
        readonly vT2StartRef: [number, number, number];
        readonly vSlingshotBodyRef: [number, number, number];
        readonly vT1EndSs: [number, number, number];
        readonly vT2StartSs: [number, number, number];
        readonly ssManeuverPlane: [number, number, number];
        readonly slingshotApproachOrbit: {
            referenceBody: {
                name: string;
                mass: number;
                radius: number;
                siderealRotation: number;
                atmPressure: number;
                atmScaleHeight: number;
                atmRadius: number;
                gravitationalParameter: number;
                circularOrbitVelocity: (altitude: number) => number;
                siderealTimeAt: (longitude: number, time: number) => number;
            };
            semiMajorAxis: number;
            eccentricity: number;
            inclination: number;
            longitudeOfAscendingNode: number;
            argumentOfPeriapsis: number;
            meanAnomalyAtEpoch: number;
            timeOfPeriapsisPassage: number | undefined;
            inclinationDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
            longitudeOfAscendingNodeDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
            argumentOfPeriapsisDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
            isHyperbolic: () => boolean;
            apoapsis: () => number;
            periapsis: () => number;
            apoapsisAltitude: () => number;
            periapsisAltitude: () => number;
            semiMinorAxis: () => number;
            semiLatusRectum: () => number;
            meanMotion: () => number;
            period: () => number;
            rotationToReferenceFrame: () => import("../../../ts-ksp/lib/quaternion").Quaternion;
            normalVector: () => import("../../../ts-ksp/lib/vector3").Vector3;
            phaseAngle: (orbit: Orbit, t: number) => number;
            meanAnomalyAt: (t: number) => number;
            eccentricAnomalyAt: (t: number) => number;
            trueAnomalyAt: (t: number) => number;
            trueAnomalyAtRadiusOutbound: (r: number) => number;
            trueAnomalyAtRadiusInbound: (r: number) => number;
            positionAt: (t: number) => import("../../../ts-ksp/lib/vector3").Vector3;
            eccentricAnomalyAtTrueAnomaly: (tA: number) => number;
            meanAnomalyAtTrueAnomaly: (tA: number) => number;
            timeAtTrueAnomaly: (tA: number, t0: number | null) => number;
            radiusAtTrueAnomaly: (tA: number) => number;
            altitudeAtTrueAnomaly: (tA: number) => number;
            speedAtTrueAnomaly: (tA: number) => number;
            positionAtTrueAnomaly: (tA: number) => import("../../../ts-ksp/lib/vector3").Vector3;
            velocityAtTrueAnomaly: (tA: number) => import("../../../ts-ksp/lib/vector3").Vector3;
            trueAnomalyAtPosition: (p: import("../../../ts-ksp/lib/vector3").Vector3) => number;
        };
        readonly slingshotSoiInTime: number;
        readonly pManSs: [number, number, number];
        readonly vManStartSs: [number, number, number];
        readonly speedManEndSs: number;
        readonly vManEndSs: [number, number, number];
        readonly slingshotExitOrbit: {
            referenceBody: {
                name: string;
                mass: number;
                radius: number;
                siderealRotation: number;
                atmPressure: number;
                atmScaleHeight: number;
                atmRadius: number;
                gravitationalParameter: number;
                circularOrbitVelocity: (altitude: number) => number;
                siderealTimeAt: (longitude: number, time: number) => number;
            };
            semiMajorAxis: number;
            eccentricity: number;
            inclination: number;
            longitudeOfAscendingNode: number;
            argumentOfPeriapsis: number;
            meanAnomalyAtEpoch: number;
            timeOfPeriapsisPassage: number | undefined;
            inclinationDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
            longitudeOfAscendingNodeDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
            argumentOfPeriapsisDegs: () => import("../../../ts-ksp/lib/utility-types").AngleDegrees;
            isHyperbolic: () => boolean;
            apoapsis: () => number;
            periapsis: () => number;
            apoapsisAltitude: () => number;
            periapsisAltitude: () => number;
            semiMinorAxis: () => number;
            semiLatusRectum: () => number;
            meanMotion: () => number;
            period: () => number;
            rotationToReferenceFrame: () => import("../../../ts-ksp/lib/quaternion").Quaternion;
            normalVector: () => import("../../../ts-ksp/lib/vector3").Vector3;
            phaseAngle: (orbit: Orbit, t: number) => number;
            meanAnomalyAt: (t: number) => number;
            eccentricAnomalyAt: (t: number) => number;
            trueAnomalyAt: (t: number) => number;
            trueAnomalyAtRadiusOutbound: (r: number) => number;
            trueAnomalyAtRadiusInbound: (r: number) => number;
            positionAt: (t: number) => import("../../../ts-ksp/lib/vector3").Vector3;
            eccentricAnomalyAtTrueAnomaly: (tA: number) => number;
            meanAnomalyAtTrueAnomaly: (tA: number) => number;
            timeAtTrueAnomaly: (tA: number, t0: number | null) => number;
            radiusAtTrueAnomaly: (tA: number) => number;
            altitudeAtTrueAnomaly: (tA: number) => number;
            speedAtTrueAnomaly: (tA: number) => number;
            positionAtTrueAnomaly: (tA: number) => import("../../../ts-ksp/lib/vector3").Vector3;
            velocityAtTrueAnomaly: (tA: number) => import("../../../ts-ksp/lib/vector3").Vector3;
            trueAnomalyAtPosition: (p: import("../../../ts-ksp/lib/vector3").Vector3) => number;
        };
        readonly slingshotSoiOutTime: number;
        readonly deltaVectorMan: [number, number, number];
        readonly deltaVMan: number;
        readonly totalDeltaV: number;
    } | null>;
    calculate: () => void;
    mission: import("vue").ComputedRef<{
        originBody: OrbitingCelestialBody;
        slingshotBody: OrbitingCelestialBody;
        destinationBody: OrbitingCelestialBody;
        initialOrbitalVelocity: number;
        finalOrbitalVelocity: number;
        departureRangeDays: number[];
        durationRangeDays: number[];
    } | null>;
    transferOrbits: import("vue").ComputedRef<{
        orbit: Orbit;
        interval?: [number, number] | undefined;
    }[]>;
    slingshotOrbits: import("vue").ComputedRef<{
        orbit: Orbit;
        interval?: [number, number] | undefined;
    }[]>;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {} & {}>, {}>;
export default _default;
